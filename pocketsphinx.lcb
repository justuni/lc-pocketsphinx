library community.livecode.trevordevore.pocketsphinx

  use com.livecode.engine
  use com.livecode.foreign
  use com.livecode.file

  metadata title is "pocketsphinx"
  metadata author is "Trevor DeVore"
  metadata version is "0.0.1"

  public type ps_decoder_t_ptr is Pointer
  public type cmd_ln_t_ptr is Pointer
  public type arg_t_ptr is Pointer
  public type size_t is CUInt
  public type ps_result is CInt

  foreign handler MCStringCreateWithCString(in pString as Pointer, out rString as String) returns CBool binds to "<builtin>"
  foreign handler MCDataGetBytePtr(in pData as Data) returns Pointer binds to "<builtin>"

  // cmd_ln_t *cmd_ln_init(cmd_ln_t *inout_cmdln, arg_t const *defn, int32 strict, ...);
  foreign handler cmd_ln_init (in pCmdLine as optional cmd_ln_t_ptr, in pArgsArray as optional arg_t_ptr, in pIsStrict as CBool, ...) \
        returns optional cmd_ln_t_ptr \
        binds to "c:sphinxbase>cmd_ln_init"

  // int cmd_ln_free_r(cmd_ln_t *cmdln);
  foreign handler cmd_ln_free_r (in pConfig as cmd_ln_t_ptr) \
        returns ps_result \
        binds to "c:sphinxbase>cmd_ln_free_r"

  // arg_t const *ps_args(void);
  foreign handler ps_args () \
        returns optional arg_t_ptr \
        binds to "c:pocketsphinx>ps_args"

  // ps_decoder_t *ps_init(cmd_ln_t *config);
  foreign handler ps_init (in pConfig as cmd_ln_t_ptr) \
        returns optional ps_decoder_t_ptr \
        binds to "c:pocketsphinx>ps_init"

  // int ps_free(ps_decoder_t *ps);
  foreign handler ps_free (in pPsDecoder as ps_decoder_t_ptr) \
        returns ps_result \
        binds to "c:pocketsphinx>ps_free"

  // int ps_start_utt(ps_decoder_t *ps);
  foreign handler ps_start_utt (in pPsDecoder as ps_decoder_t_ptr) \
        returns ps_result \
        binds to "c:pocketsphinx>ps_start_utt"

  // int ps_end_utt(ps_decoder_t *ps);
  foreign handler ps_end_utt (in pPsDecoder as ps_decoder_t_ptr) \
        returns ps_result \
        binds to "c:pocketsphinx>ps_end_utt"

  /*
  int ps_process_raw(ps_decoder_t *ps,
                   int16 const *data,
                   size_t n_samples,
                   int no_search,
                   int full_utt);
  */
  foreign handler ps_process_raw (in pPsDecoder as ps_decoder_t_ptr, in pData as Pointer, in pNumSamples as size_t, in pNoSearch as CBool, in pFullUtt as CBool) \
        returns ps_result \
        binds to "c:pocketsphinx>ps_process_raw"

  // char const *ps_get_hyp(ps_decoder_t *ps, int32 *out_best_score);
  foreign handler ps_get_hyp (in pPsDecoder as ps_decoder_t_ptr, out pBestScore as CInt) \
        returns optional Pointer \
        binds to "c:pocketsphinx>ps_get_hyp"

  /**
  Summary: Reads in an audio file and returns the hypothesis.

  Description:
  File must be single-channel (monaural), little-endian, unheadered 16-bit signed PCM audio file sampled at 16000 Hz.

  Returns: String
  */
  public handler pocketsphinxProcessFile(in pFilename as String, in pLogFilename as String, out rScore as Integer) returns String
    variable tArgs as arg_t_ptr

    variable tLogKey as ZStringNative
    variable tLogValue as ZStringNative
    variable tHmmKey as ZStringNative
    variable tHmmValue as ZStringNative
    variable tLmKey as ZStringNative
    variable tLmValue as ZStringNative
    variable tDictKey as ZStringNative
    variable tDictValue as ZStringNative
    variable tTerminator as optional Pointer

    variable tConfig as optional cmd_ln_t_ptr
    variable tPSDecoder as optional ps_decoder_t_ptr
    variable tBuffer as Data
    variable tBufferPointer as Pointer
    variable tRv as Integer
    variable tNumSamples as Integer
    variable tHypPtr as optional Pointer
    variable tHypData as Data
    variable tHypothesis as String

    put "-hmm" into tHmmKey
    put my resources folder & "/model/en-us/en-us" into tHmmValue
    put "-lm" into tLmKey
    put my resources folder & "/model/en-us/en-us.lm.bin" into tLmValue
    put "-dict" into tDictKey
    put my resources folder & "/model/en-us/cmudict-en-us.dict" into tDictValue
    put "-logfn" into tLogKey
    put pLogFilename into tLogValue

    unsafe
      put ps_args() into tArgs

      put cmd_ln_init(nothing, tArgs, true, \
            tHmmKey, tHmmValue, \
            tLmKey, tLmValue, \
            tDictKey, tDictValue,\
            tLogKey, tLogValue, \
            tTerminator) into tConfig

      if tConfig is not nothing then
        put ps_init(tConfig) into tPSDecoder
      end if

      if tPSDecoder is not nothing then
        put the contents of file pFilename into tBuffer
        put the number of bytes in tBuffer / 2 into tNumSamples
        put MCDataGetBytePtr(tBuffer) into tBufferPointer
      end if

      if the number of bytes in tBuffer > 0 then
        put ps_start_utt(tPSDecoder) into tRv
        put ps_process_raw(tPSDecoder, tBufferPointer, tNumSamples, false, false) into tRv
        put ps_end_utt(tPSDecoder) into tRv
        put ps_get_hyp(tPSDecoder, rScore) into tHypPtr
        if tHypPtr is not nothing then
          if not MCStringCreateWithCString(tHypPtr, tHypothesis) then
            log "failed to convert const char * to String"
          end if
        end if
      end if

      if tPSDecoder is not nothing then
        ps_free(tPSDecoder)
      end if

      if tConfig is not nothing then
        cmd_ln_free_r(tConfig)
      end if
    end unsafe

    return tHypothesis
  end handler

end library
